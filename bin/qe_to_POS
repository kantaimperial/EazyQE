#!/usr/bin/env python3
import re
import sys
from collections import OrderedDict

def strip_index(atom):
    """末尾の数字を剥がす: 'Co1'→'Co'"""
    return re.sub(r'\d+$', '', atom)

def parse_incar(path="INCAR.in"):
    lines = open(path).readlines()
    positions = []
    cell = []

    i = 0
    while i < len(lines):
        line = lines[i].strip()
        # 空行・コメント行はスキップ
        if not line or line.startswith('!'):
            i += 1
            continue

        # ATOMIC_POSITIONS セクション
        if line.upper().startswith("ATOMIC_POSITIONS"):
            i += 1
            while i < len(lines):
                l = lines[i].strip()
                # 空行または次セクション（CELL_PARAMETERS）が来たら終了
                if not l or l.upper().startswith("CELL_PARAMETERS"):
                    break
                parts = l.split()
                # 要素 + 3 座標がない行は終了
                if len(parts) < 4:
                    break
                # 座標が float に変換できない行は終了
                try:
                    coords = [float(x) for x in parts[1:4]]
                except ValueError:
                    break
                elem_raw = parts[0]
                elem = strip_index(elem_raw)
                # 座標は文字列として再出力したい場合は map(str, coords) を使います
                positions.append((elem, list(map(str, coords))))
                i += 1
            continue

        # CELL_PARAMETERS セクション
        if line.upper().startswith("CELL_PARAMETERS"):
            i += 1
            for _ in range(3):
                parts = lines[i].split()
                # 先頭に単位名（angstrom など）があれば除去
                if re.match(r"[A-Za-z]", parts[0]):
                    parts = parts[1:]
                cell.append(parts)
                i += 1
            continue

        i += 1

    # バリデーション
    if not positions:
        sys.exit("ERROR: ATOMIC_POSITIONS セクションが見つかりません")
    if len(cell) != 3:
        sys.exit("ERROR: CELL_PARAMETERS の3行が見つかりません")

    return positions, cell

def write_poscar(positions, cell, outfile="POSCAR"):
    # species と count を positions の登場順で集計
    species_counts = OrderedDict()
    for elem, _ in positions:
        species_counts.setdefault(elem, 0)
        species_counts[elem] += 1

    with open(outfile, "w") as f:
        f.write("Generated from INCAR.in\n")
        f.write("1.0\n")
        # セルパラメータ
        for vec in cell:
            f.write("  " + "  ".join(vec) + "\n")
        # Species とその個数
        elems  = list(species_counts.keys())
        counts = [species_counts[e] for e in elems]
        f.write("  " + "  ".join(elems) + "\n")
        f.write("  " + "  ".join(str(c) for c in counts) + "\n")
        f.write("Direct\n")
        # ATOMIC_POSITIONS の順序で座標を出力
        for elem, coord in positions:
            f.write("  " + "  ".join(coord) + "\n")

    print(f"✅ Wrote {outfile}")

if __name__ == "__main__":
    positions, cell = parse_incar("INCAR.in")
    write_poscar(positions, cell, "POSCAR")

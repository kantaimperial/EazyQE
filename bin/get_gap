#!/usr/bin/env python3
import sys
import re

def extract_bands_and_occupations(filename):
    bands_list = []
    occs_list = []

    with open(filename, 'r') as f:
        lines = f.readlines()

    i = 0
    while i < len(lines):
        line = lines[i]

        if "bands (ev):" in line:
            i += 1
            while i < len(lines) and lines[i].strip() == "":
                i += 1

            bands = []
            while i < len(lines) and re.match(r"^\s*[-\d\.]", lines[i]):
                bands.extend([float(x) for x in lines[i].split()])
                i += 1
            if not bands:
                raise ValueError(f"バンドエネルギーが読み取れませんでした（行 {i}）")
            bands_list.append(bands)

        elif "occupation numbers" in line:
            i += 1
            occs = []
            while i < len(lines) and re.match(r"^\s*[-\d\.]", lines[i]):
                occs.extend([float(x) for x in lines[i].split()])
                i += 1
            if not occs:
                raise ValueError(f"占有数が読み取れませんでした（行 {i}）")
            occs_list.append(occs)
        else:
            i += 1

    return bands_list, occs_list

def extract_fermi_energy(filename):
    with open(filename, 'r') as f:
        for line in f:
            if "the Fermi energy is" in line:
                return float(line.split()[-2])
    return None

def get_vbm_cbm(bands_list, occs_list):
    vbm = -1e10
    cbm = 1e10

    for bands, occs in zip(bands_list, occs_list):
        for e, o in zip(bands, occs):
            if o > 1e-3:
                vbm = max(vbm, e)
            if o < 1e-3:
                cbm = min(cbm, e)

    return vbm, cbm

def main():
    if len(sys.argv) != 2:
        print("Usage: get_gap OUTCAR.out")
        sys.exit(1)

    filename = sys.argv[1]
    bands_list, occs_list = extract_bands_and_occupations(filename)
    vbm, cbm = get_vbm_cbm(bands_list, occs_list)
    fermi = extract_fermi_energy(filename)

    gap = cbm - vbm
    lines = []

    if gap < 1e-3:
        lines.append("金属と判定されました。バンドギャップは 0 eV")
    else:
        lines.append(f"VBM: {vbm:.3f} eV")
        lines.append(f"CBM: {cbm:.3f} eV")
        lines.append(f"Gap: {gap:.3f} eV (Insulator/Semiconductor)")
    if fermi is not None:
        lines.append(f"Fermi energy: {fermi:.3f} eV")

    # print to screen
    for line in lines:
        print(line)

    # write to file
    with open("get_gap.out", "w") as fout:
        for line in lines:
            fout.write(line + "\n")

if __name__ == "__main__":
    main()
